# -*- mode: org; coding: utf-8; -*-
#+TITLE: GNU Emacs Configuration
#+AUTHOR: Gaelan D'costa

* Welcome!
Gaelan D'costa's GNU emacs config; there are many like it, but this one is mine.

Eventually I will understand my own config enough to explain it in a cohesive way.

This configuration is built as a nix package; as such, it assumes that nix has pre-supplied all necessary packages (which ironically, are parsed out of this file.) As such, it is also paired with whatever version of emacs that this package includes. Currently, this is GNU Emacs 28.1

** Inspirations
- [[https://github.com/daviwil/emacs-from-scratch/][Emacs from Scratch]] is a great series of youtube videos where the author clearly puts a lot of thoughts and well-principled thought into his configuration principles.

- I am super indebted to whoever [[http://github.com/terlar/emacs-config][Terlar]] is, their nix package and structure is one I found a lot of insight about how to write nix packages from. 

** Key package choices
- package management :: [[https://github.com/jwiegley/use-package][use-package]]
- X Window Managemer :: [[https://github.com/ch11ng/exwm][exwm]]
- buffer navigation :: [[https://github.com/abo-abo/avy][avy]]
- completion
  - Completion-in-buffer :: [[https://github.com/minad/corfu][corfu]]
  - Completion-in-minibuffer :: [[https://github.com/minad/vertico][vertico]]
  - regex / fuzzy / multi-segment searching :: [[https://github.com/oantolin/orderless][orderless]]
- version control (git) :: [[https://magit.vc/][magit]]
- structured editing :: [[https://github.com/Fuco1/smartparens][smartparens]]
- project management :: [[https://github.com/bbatsov/projectile][projectile]]
- citation Management :: [[https://github.com/emacs-citar/citar][citar]]
- knowledge/idea management :: [[https://www.orgroam.com/][org-roam]]

* Early Initialization

#+BEGIN_SRC emacs-lisp :tangle early-init.el
  ;;; early-init.el --- Early Initialization -*- lexical-binding: t; -*-
#+END_SRC
  
** Version Sentinal

I am not sure if this config will work with older versions of emacs, so I'll abort if the running version of emacs is older than a known good version.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (let ((minver "28.1"))
    (when (version< emacs-version minver)
      (error "Your Emacs is too old -- this config requires v%s or higher" minver)))
#+END_SRC

** Startup

Let's time and display the amount of time it takes to bring up my Emacs configuration

#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Loaded GNU Emacs in %0.03fs"
		       (float-time (time-subtract after-init-time
						  before-init-time)))))
#+END_SRC

I saw a config where the author temporarily set garbage collection thresholds for speed during initialization, presumably to minimize GC overhead at startup.
   
When emacs has finished initalizing, it runs a hook we've set up to restore a more aggressive threshold.
   
This is a pattern I have seen various people use, so it seems like a good idea.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (let ((normal-gc-cons-threshold gc-cons-threshold)
	(normal-gc-cons-percentage gc-cons-percentage)
	(normal-file-name-handler-alist file-name-handler-alist)
	(init-gc-cons-threshold most-positive-fixnum)
	(init-gc-cons-percentage 0.6))
    (setq gc-cons-threshold init-gc-cons-threshold
	  gc-cons-percentage init-gc-cons-percentage
	  file-name-handler-alist nil)
    (add-hook 'after-init-hook
	      `(lambda ()
		 (setq gc-cons-threshold ,normal-gc-cons-threshold
		       gc-cons-percentage ,normal-gc-cons-percentage
		       file-name-handler-alist ',normal-file-name-handler-alist))))
#+END_SRC
Inhibit startup screen and messages.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (setq inhibit-startup-screen t)
#+END_SRC

** UI speedups

Disable unnecessary GUI components.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
  (setq use-dialog-box nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

* Base settings

#+BEGIN_SRC emacs-lisp :tangle yes
  ;;; init.el --- Initialization -*- lexical-binding: t; -*-
#+END_SRC

** Variables

Private an easy way to toggle debug mode which will set certain variables to produce each informative output. It can be set either by providing the environment variable =DEBUG= or start Emacs with =--debug-init=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-and-compile
    (when (getenv "DEBUG") (setq init-file-debug t))
    (setq debug-on-error (and (not noninteractive) init-file-debug)))
#+END_SRC
   
Provide XDG-compliant locations for Emacs to store and cache data.

#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-and-compile
    (defvar gaelan/data-dir
      (if (getenv "XDG_DATA_HOME")
	  (concat (getenv "XDG_DATA_HOME") "/emacs/")
	(expand-file-name "~/.local/share/emacs/"))
      "Directory for emacs data")

    (defvar gaelan/cache-dir
      (if (getenv "XDG_CACHE_HOME")
	  (concat (getenv "XDG_CACHE_HOME") "/emacs/")
	(expand-file-name "~/.cache/emacs/"))
      "Directory for emacs cached data."))
#+END_SRC

** Package management
Use generated package autoloads via package-quickstart. The actual packages are provided via the nix package this file is contained in.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar package-quickstart t)
#+END_SRC

*** Load path
Add local and private libraries to ~load-path~.
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-and-compile
    (setq load-path
	  (append (delete-dups load-path)
		  (list (expand-file-name "lisp" user-emacs-directory)
			(expand-file-name "private" user-emacs-directory)))))
#+END_SRC

*** Set location of custom file
Emacs by default manages some forms for variables and faces and places them at the end of =init.el=. Since my =init.el= is generated, this would be difficult to manage.
I can tell Emacs to use a different location for these, which will not be checked into source control or regenerated and Emacs can manage it to its heart's content.

Why is it in a temporary file directory? This keeps my config immutable (or at least deliberate.)
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq custom-file (expand-file-name "custom.el" temporary-file-directory))
#+END_SRC

*** use-package
[[https://github.com/jwiegley/use-package][use-package]] is a wonderful package from John Wiegley which makes downloading and loading and configuring emacs packaging a much more structured affair. It can optionally download missing packages and uses a single macro to load configuration and set up bindings, regular hooks, extension associations, etc... in a consistent way.

The [[https://github.com/nix-community/emacs-overlay][emacs-overlay]] nix package also leverages use-package to know what packages it needs to download when generating an emacs package from this file.
#+BEGIN_SRC emacs-lisp :tangle yes
     ;; Since (use-package) is a macro, we don't actually need to load it except
     ;; when we compile a new bytecode version of our emacs file.
     (eval-when-compile
       (require 'use-package))
     (require 'diminish)                ;; if you use :diminish
     (require 'bind-key)                ;; if you use :bind

     (eval-and-compile
       ;; By default if :ensure is non-nil it will use package.el to download the
       ;; package. We use a custom function to ensure that never happens.
       (defun gaelan/use-package-ensure-ignore (&rest _args) t)
       (setq use-package-ensure-function #'gaelan/use-package-ensure-ignore)

       ;; Unless we explicitly want packages loaded eagerly, rely on setting hooks
       ;; or mod or bindings to generate autoloads to only load the package on
       ;; demand.
       (setq use-package-always-defer t)
       ;; Don't assume hooks have the substring "-hook" at the end.
       (setq use-package-hook-name-suffix nil))

     ;; If debug mode is on, be more chatty. Otherwise, don't
     (if init-file-debug
	 (setq use-package-verbose t
	       use-package-expand-minimally nil
	       use-package-compute-statistics t)
       (setq use-package-verbose nil
	     use-package-expand-minimally t))
#+END_SRC

*** Keep ~user-emacs-directory~ clean.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package no-littering
    :defer 1
    :ensure t
    :init
    (setq no-littering-etc-directory gaelan/data-dir
	  no-littering-var-directory gaelan/cache-dir))
#+END_SRC

** UX
   Always request confirmation before quitting emacs
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq confirm-kill-emacs #'y-or-n-p)
   #+END_SRC

   Use =y= and =n= for prompts instead of =yes= and =no=
   #+BEGIN_SRC emacs-lisp :tangle yes
     (fset #'yes-or-no-p #'y-or-n-p)
   #+END_SRC

   Set the default Mac modifier bindings to mirror Linux bindings
   #+BEGIN_SRC emacs-lisp :tangle yes
     (when (eq system-type 'darwin)
       (setq mac-option-modifier 'super
	     mac-command-modifier 'meta))
   #+END_SRC
* Appearance
** Mode line
*** Position
#+BEGIN_SRC emacs-lisp :tangle yes
  (column-number-mode 1)
  (line-number-mode 1)
#+END_SRC
** Margins
Set the line length to 80 characters
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq fill-column 80)
#+END_SRC

Show a line indicating the end of the page, as it were
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-display-fill-column-indicator-mode +1)
#+END_SRC
** Colour Theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rebecca-theme
    :ensure t
    :demand t
    :config
    (if (daemonp)
	(add-hook 'after-make-frame-functions
		  (lambda (frame)
		    (with-selected-frame frame
		      (load-theme 'rebecca t))))
      (load-theme 'rebecca t)))
#+END_SRC
** Highlight parentheses
Visually separate nested delimiter pairs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
      :hook
      ((clojure-mode-hook
	emacs-lisp-mode-hook
	ielm-mode-hook
	lisp-mode-hook
	scheme-mode-hook)
       . rainbow-delimiters-mode))
#+END_SRC
* Operating System
I love Emacs so much, I use it as my primary computing environment :)
** Window Manager
*** exwm
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Assume that if exwm is installed, then we want emacs to handle all
  ;; pinentry input
  (use-package pinentry
    :after (exwm)
    :ensure t
    :config
    (pinentry-start))

  (use-package exwm
    :defer 0
    :ensure t
    :if (eq system-type 'gnu/linux)
    :custom
    ;; Set window management key bindings
    (exwm-input-global-keys
     `(
       ;; Reset to line-mode
       ([?\s-r] . exwm-reset)
       ;; Switch workspaces
       ([?\s-w] . exwm-workspace-switch)
       ;; s-0 is inconvenient, map to s-` and s-esc as well
       ([?\s-`] . (lambda ()
		    (interactive)
		    (exwm-workspace-switch-create 0)))
       ([s-escape] . (lambda ()
		       (interactive)
		       (exwm-workspace-switch-create 0)))
       ;; Launch application a la dmenu
       ([?\s-p] . (lambda (command)
		    (interactive (list (read-shell-command "$ ")))
		    (start-process-shell-command command nil command)))
       ;; Switch to numbered workspace.
       ,@(mapcar (lambda (i)
		   `(,(kbd (format "s-%d" i)) .
		     (lambda ()
		       (interactive)
		       (exwm-workspace-switch-create ,i))))
		 (number-sequence 0 9))))
    ;; translate emacs keybindings into CUA ones for X applications. This allows
    ;; some uniformity between emacs and most X apps.
    (exwm-input-simulation-keys
     '(;; movement
       ([?\C-b] . [left])
       ([?\M-b] . [C-left])
       ([?\C-f] . [right])
       ([?\M-f] . [C-right])
       ([?\C-p] . [up])
       ([?\C-n] . [down])
       ([?\C-a] . [home])
       ([?\C-e] . [end])
       ([?\M-v] . [prior])
       ([?\C-v] . [next])
       ([?\C-d] . [delete])
       ([?\C-k] . [S-end delete])
       ;; cut/paste
       ([?\C-w] . [?\C-x])
       ([?\M-w] . [?\C-c])
       ([?\C-y] . [?\C-v])))
    ;; Let emacs handle GnuPG prompts
    (epg-pinentry-mode 'loopback)
    ;; Start with four workspaces on start
    (exwm-workspace-number 4)
    ;; Handle specific apps in particular window management ways.
    (exwm-manage-configurations '(((string= exwm-instance-name "brave-browser") workspace 2)
				  ((string= exwm-instance-name "signal") workspace 3)
				  ((string= exwm-instance-name "slack") workspace 3)
				  ((string= exwm-instance-name "whatsapp-for-linux") workspace 3)))
    :hook ((exwm-update-class-hook .
				   (lambda ()
				     "rename buffer names to their associated X class name."
				     (exwm-workspace-rename-buffer exwm-class-name)))))

  (use-package exwm-randr
    :ensure nil
    :defer 0
    :after (exwm)
    :init
    (defun gaelan/exwm-randr-screen-change-hook ()
      "Run autorandr whenever exwm detects a screen change"
      )
    ;; Assign particular workspaces to particular monitors by default
    (setq exwm-randr-workspace-monitor-plist
	  '(0 "DP-2-2-1" 1 "DP-2-2-1" 2 "DP-1-1-1" 3 "DP-1-1-1"))
    :hook ((exwm-randr-screen-change-hook .
					  (lambda ()
					    "Run autorandr whenever exwm detects a screen change"
					    (start-process-shell-command
					     "autorandr" nil "autorandr --change"))))
    :config
    (exwm-randr-enable))
#+END_SRC
*** ediff workaround
ediff doesn't render correctly in exwm; fix by creating "Ediff Control Panel"
in a floating frame rather than an Emacs window.
#+BEGIN_SRC emacs-lisp :tangle yes
  (with-eval-after-load 'ediff-wind
    (eval-when-compile
      (require 'ediff-wind))
    (setq ediff-control-frame-parameters
	  (cons '(unsplittable . t) ediff-control-frame-parameters)))
#+END_SRC
** Multimedia keys
Emacs should handle keyboard media shortcuts
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package desktop-environment
    :ensure t
    :defer 1
    :after (exwm)
    :init
    (setq desktop-environment-screenlock-command "i3lock -n -c 746542")
    :config
    (desktop-environment-mode))
#+END_SRC

* Completion / Minibuffer
** Consult
Enhance emacs commands based on completion
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package consult
    :demand t
    :ensure t)
#+END_SRC
** Corfu
Completion popups in the regular buffer

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package corfu
    :defer 1
    :commands (corfu-mode global-corfu-mode)
    :ensure t
    :hook ((eshell-mode-hook . (lambda ()
				 (setq-local corfu-auto nil)
				 (corfu-mode))))
    :config
    (global-corfu-mode))
#+END_SRC
** Marginalia
Add annotations to minibuffer completions to provide you with more information about the displayed options

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package marginalia
    :demand t
    :ensure t
    :commands (marginalia-mode)
    :bind (:map minibuffer-local-map
		("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC
** Orderless
Enable helm-like searching via completion frameworks, where I can filter
candidates by multiple regex patterns separated by a space.

#+BEGIN_SRC elisp :tangle yes
  (use-package orderless
    :defer 1
    :ensure t
    :custom
    ;; Fallback to basic for completions that depend on dynamic completion
    ;; tables, whatever that is.
    (completion-styles '(orderless basic))
    ;; TRAMP can't use orderless at all, so override it to use basic and
    ;; partial completion (like /u/s/l for /usr/share/local)
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC
** Vertico
Vertico adds a good minibuffer UX to Emacs' default completion framework.

The defaults in Emacs 28 (~fido-mode~, ~vertical-fido-mode~) do not make it
easy for me to see potential options in various contexts, I have found.

#+BEGIN_SRC elisp :tangle yes
  (use-package vertico
    :commands vertico-mode
    :defer 1
    :ensure t
    :config
    (vertico-mode +1))

  ;; Save sessionbuffer history
  ;; Vertico uses this to prefer popular choices when listing.
  (use-package savehist
    :defer 2
    :config
    (savehist-mode))

  ;; Some recommended vertico UX settings
  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
	  #'command-completion-default-include-p))

#+END_SRC
** which-key
When you start a keybinding, list possible completions are and what they do
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :defer 1
    :commands (which-key-mode)
    :config
    (which-key-mode))
#+END_SRC
* Functionality
** Reverting
Automatically revert when a file changes on disk; this happens a lot given my files are managed in Seafile

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emacs
    :bind (("s-u" . revert-buffer))
    :ensure nil
    :hook ((after-load-hook . (lambda ()
				(global-auto-revert-mode +1)))))
#+END_SRC
** Spellchecking
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package emacs
      :bind (("C-c f" . flyspell-toggle)))
#+END_SRC
** Project Management

Projectile is a framework for managing (usually) software development projects in a standard way, so that the same keybindings can be used to test projects, compile them, etc...

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package projectile
    :ensure t
    :defer 2
    :commands projectile-mode
    :config
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map)))
#+END_SRC

** Buffer Fast-travel
Avy allows you to zip around the visible part of an emacs buffer by using letter sequences to transport quickly to various parts of the buffer

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :autoload (avy-setup-default)
    :bind (("C-:" . avy-goto-char)
	   ("C-'" . avy-goto-char-2)
	   ("C-c C-j" . avy-resume)
	   ("M-g e" . avy-goto-word-0)
	   ("M-g f" . avy-goto-line)
	   ("M-g w" . avy-goto-word-1))
    :hook ((after-init-hook . (lambda ()
				(avy-setup-default)))))
#+END_SRC
** Structured Editing
We use smartparens for structured editing like Ruby blocks or lisp s-expressions

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package smartparens
    :ensure t
    :commands (smartparens-global-mode
	       sp-use-paredit-bindings
	       sp-use-smartparens-bindings)
    :hook ((clojure-mode-hook
	     emacs-lisp-mode-hook
	     ielm-mode-hook
	     lisp-mode-hook
	     scheme-mode-hook)
	    . smartparens-strict-mode)
    :defer 2
    :config
    (require 'smartparens-config)
    (sp-use-paredit-bindings)
    (sp-use-smartparens-bindings)
    (smartparens-global-mode))
#+END_SRC
** grepping
[[https://blog.burntsushi.net/ripgrep/][ripgrep]] is a grep replacement written in Rust. It is more performant and more powertful than grep.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rg
    :bind (("C-c s" . rg-menu))
    :ensure t)
#+END_SRC
* Software Development
** Packages
*** envrc
Project-specific environment variables via =direnv=
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package direnv
    :ensure t
    :defer 1
    :commands (direnv-mode)
    :config
    (direnv-mode))
#+END_SRC

*** editconfig
A editor-agnostic way to maintain project coding styles
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package editorconfig
    :ensure t
    :defer 1
    :commands
    (editorconfig-mode)
    :config
    (editorconfig-mode 1))
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck
    :ensure t
    :defer 2
    :commands global-flycheck-mode
    :config
    (global-flycheck-mode))
#+END_SRC
** Version Control
*** magit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :defer 3)
#+END_SRC
** Language Server Protocol
IDE-like functionality such as intellisense, debugging

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :init
    (defun gaelan/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
	    'orderless))
    :custom
    (lsp-completion-provider :none) ;; we use Corfu
    :hook ((prog-mode-hook . lsp)
	   (lsp-completion-mode . gaelan/lsp-mode-setup-completion)))

  (use-package lsp-ui
    :ensure t
    :commands (lsp-ui-mode)
    :after (lsp-mode))
#+END_SRC
* Programming Language support / environments
*** Elm
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elm-mode
    :ensure t
    :mode "\\.elm\\'")
#+END_SRC

*** Nix
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nix-mode
    :ensure t
    :mode "\\.nix\\'")
#+END_SRC
*** Clojure

Support flycheck syntax checking

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package flycheck-clj-kondo
    :after (clojure-mode flycheck)
    :hook (clojure-mode-hook . (lambda ()
				 (require 'flycheck-clj-kondo)))
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
	   ("\\.cljs\\'" . clojurescript-mode)
	   ("\\.cljc\\'" . clojurec-mode))
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cider
    :ensure t
    :bind ("C-c C-x C-j C-j" . cider-jack-in))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package clj-refactor
    :commands clj-refactor-mode
    :after (cider)
    :hook (cider-mode . (lambda ()
			  (clj-refactor-mode 1)))
    :ensure t)
#+END_SRC
*** Racket / Scheme
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Core REPL environment
  (use-package geiser
    :commands (run-geiser)
    :ensure t)

  ;; Anticipated Scheme runtimes
  (use-package geiser-racket
    :after (geiser)
    :ensure t)
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rustic
    :ensure t
    :mode (("\\.rs\\'" . rustic-mode)))
#+END_SRC
*** Terraform
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package terraform-mode
      :ensure t
      :mode "\\.tf\\'")
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yaml-mode
    :ensure t
    :mode "\\.ya?ml\\'")
#+END_SRC
* SRE / Devops
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package kubernetes
    :ensure t
    :commands kubernetes-overview)
#+END_SRC
* Productivity
Read PDF files and epub ebooks on Emacs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nov
    :ensure t
    :mode ("\\.epub\\'" . nov-mode))

  (use-package pdf-tools
    :ensure t
    :mode ("\\.pdf\\'" . pdf-view-mode))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar gaelan/documents-dir
    (expand-file-name "~/Documents")
    "Directory that contains all of my documents")

  (defvar gaelan/brain-dir
    (expand-file-name "brain" gaelan/documents-dir)
    "Directory containing my Zettelkasten")

  (defvar gaelan/gtd-dir
    (expand-file-name "gtd" gaelan/documents-dir)
    "Directory containing my tasks")
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :ensure t
    :defines (org-capture-templates
	      org-refile-targets
	      org-agenda-custom-commands
	      org-stuck-projects)
    :commands (org-narrow-to-subtree)
    :hook (org-mode-hook . (lambda ()
			     (visual-line-mode +1)))
    :mode ("\\.org\\'" . org-mode)
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture))
    :init
    (setq org-ellipsis " ▾"
	  org-agenda-files (list
			    (expand-file-name "gtd.org" gaelan/gtd-dir)
			    (expand-file-name "tickler.org" gaelan/gtd-dir))
	  org-capture-templates
	  '(("t" "Todo" entry (file "~/Documents/gtd/inbox.org")
	     "* TODO %?"))
	  org-refile-targets
	  '(("~/Documents/gtd/gtd.org" . (:maxlevel . 2))
	    ("~/Documents/gtd/someday.org" . (:level . 1))
	    ("~/Documents/gtd/tickler.org" . (:level . 1)))
	  ;; Handy search views for agenda mode
	  org-agenda-custom-commands
	  '(("n" "Current Actions"
	     ((todo "NEXT")
	      (todo "STARTED")
	      (todo "WAITING")))
	    ("u" "Unplanned Projects"
	     ((tags-todo "PROJECT/PLAN"))))
	  org-stuck-projects
	  '("+PROJECT+LEVEL=2/-COMPLETED-ABANDONED-PAUSED"
	    ("TODO" "NEXT" "STARTED") nil ""))
    :config
    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+END_SRC
*** org-roam
An implementation of Zettelkasten for org, inspired by org-roam
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-roam
    :ensure t
    :bind (("C-c j d" . org-roam-dailies-goto-date)
	   ("C-c j D" . org-roam-dailies-capture-date)
	   ("C-c j t" . org-roam-dailies-goto-today)
	   ("C-c j T" . org-roam-dailies-capture-today)

	   ;; Buttonmash combo for logging something
	   ;; doesn't match my mnenomic scheme otherwise.
	   ;; TODO define a function to pass nil "j" so I don't
	   ;; have to choose a selector
	   ("C-c j j" . org-roam-dailies-capture-today)

	   ("C-c j y" . org-roam-dailies-goto-yesterday)
	   ("C-c j Y" . org-roam-dailies-capture-yesterday)
	   ("C-c j n" . org-roam-dailies-goto-next-note)
	   ("C-c j p" . org-roam-dailies-goto-previous-note)
	   ("C-c n b" . org-roam-buffer-toggle)
	   ("C-c n c" . org-id-get-create)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert))
    :commands (org-roam-db-autosync-mode)
    :custom
    (org-roam-capture-templates
     '(("l" "literature" plain
	(file "~/Documents/brain/templates/literature.org")
	:target (file+head "literature/${citekey}.org" "#+TITLE: ${title}\n#+FILETAGS: literature\n")
	:unnarrowed t)
       ("p" "permanent" plain "%?"
	:target (file+head "permanent/%<%Y%m%d%H%M%S>-${slug}.org"
			   "#+TITLE: ${title}")
	:unnarrowed t)
       ("r" "rolodex" plain "%?"
	:target (file+head "rolodex/%<%Y%m%d%H%M%S>-${slug}.org"
			   "#+TITLE: ${title}"))))
    (org-roam-directory "~/Documents/brain")
    (org-roam-dailies-directory "journal/")
    (org-roam-dailies-capture-templates
     '(("j" "daily log entry" entry
	"* %<%0H:%M> %?"
	:target (file+head+olp "%<%Y>/%<%0m>/%<%Y-%m-%d>.org" "#+SETUPFILE: ../../settings.org\n#+TITLE: %<%Y-%0m-%0d, %A>\n#+FILETAGS: fleeting" ("Log"))
	:unnarrowed t)
       ("d" "Daily Morning Reflection" entry
	(file "~/Documents/brain/templates/daily.org")
	:jump-to-captured t
	:prepend t
	:target (file+head "%<%Y>/%<%0m>/%<%Y-%0m-%0d>.org" "#+SETUPFILE: ../../settings.org\n#+TITLE: %<%Y-%0m-%0d, %A>\n#+FILETAGS: fleeting"))
       ("e" "Daily Evening Reflection" entry
	(file "~/Documents/brain/templates/evening.org")
	:target (file+head "%<%Y>/%<%0m>/%<%0Y-%0m-%0d>.org" "#+SETUPFILE: ../../settings.org\n#+TITLE: %<%Y-%0m-%0d, %A>\n#+FILETAGS: fleeting")
	:unnarrowed t)
       ("w" "Weekly Reflection" entry
	(file "~/Documents/brain/templates/weekly.org")
	:target (file+head "%<%Y>/%<%0m>/%<%0Y-%0m-%0d>.org" "#+SETUPFILE: ../../settings.org\n#+TITLE: %<%Y-%0m-%0d, %A>\n#+FILETAGS: fleeting")
	:unnarrowed t)
       ("m" "Monthly Reflection" entry
	(file "~/Documents/brain/templates/monthly.org")
	:target (file+head "%<%Y>/%<%0m>/%<%Y-%0m-%0d>.org" "#+SETUPFILE: ../../settings.org\n#+TITLE: %<%Y-%0m-%0d, %A>\n#+FILETAGS: fleeting")
	:unnarrowed t)
       ("y" "Yearly Reflection" entry
	(file "~/Documents/brain/templates/yearly.org")
	:target (file+head "%<%Y>/%<%0m>/%<%Y-%0m-%0d>.org" "#+SETUPFILE: ../../settings.org\n#+TITLE: %<%Y-%0m-%0d, %A>\n#+FILETAGS: fleeting")
	:unnarrowed t)))
    (org-roam-mode-sections '(orb-section-reference
			      orb-section-file
			      org-roam-backlinks-section
			      org-roam-reflinks-section
			      org-roam-unlinked-references-section))
    (org-roam-node-display-template
     "${slipbox:10} ${title:*} ${tags}")
    :config
    ;; I use the first directory level in my org-roam directory to distinguish
    ;; which slipbox a note is in.
    ;; current slipboxes
    ;; - journal :: my daily notes
    ;; - literature :: notes on things I have read, watched, researched, etc...
    ;; - permanent :: where my own ideas live
    ;;
    ;; This is inspired by Jethro Kuan's org-roam guide
    ;; https://jethrokuan.github.io/org-roam-guide/
    (cl-defmethod org-roam-node-slipbox ((node org-roam-node))
      "Return the SLIPBOX of org-roam NODE.
      The slipbox is defined as the top-level directory name relative to the value
  of org-roam-directory."
      (car (split-string (file-relative-name (org-roam-node-file node)
					     org-roam-directory)
			 "/")))
    ;; Scan for org-roam changes and rebuild database opportunistically
    (org-roam-db-autosync-mode)
    ;; Ensure the *org-roam* buffer comes up to the right of the frame,
    ;; 1/3rd of the size
    (add-to-list 'display-buffer-alist
		 '("\\*org-roam\\*"
		   (display-buffer-in-direction)
		   (direction . right)
		   (window-width . 0.33)
		   (window-height . fit-window-to-buffer))))
#+END_SRC

Also enable a UI that makes overseeing my knowledge base easier.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package websocket
    :after org-roam)

  (use-package org-roam-ui
    :ensure t
    :commands org-roam-ui-mode
    :after org-roam
    :init
    (setq org-roam-ui-sync-theme t
	  org-roam-ui-follow t
	  org-roam-ui-update-on-save t
	  org-roam-ui-open-on-start t))
#+END_SRC

navigating my org-roam corpus will involve me clicking through a bunch of links and then realizing I need to back-track. =winner-mode= is a simple way of implementing browser-like history, by allowing me to keep track of and navigate backwards and forwards through a history of what buffers were shown in each window.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package emacs
    :ensure nil
    :defines (winner-mode-map)
    :demand 0
    :bind (:map winner-mode-map
		("C-c w p" . winner-undo)
		("C-c w n" . winner-redo))
    :config
    (winner-mode +1))
#+END_SRC


Use deft for full-text search
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package deft
    :ensure t
    :after (org-roam)
    :bind ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filename-as-title t)
    (deft-default-extension "org")
    (deft-directory org-roam-directory))
#+END_SRC
*** org-noter
A way to annotate PDF/ePubs using org mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-noter
    :ensure t
    :after (nov pdf-tools)
    :commands org-noter)
#+END_SRC

*** org-transclusion
Block-level editing/embedding, approximating the way Roam/logseq do it

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-transclusion
    :after org
    :ensure t
    :bind (("C-c n a" . org-transclusion-add)
	   ("C-c n t" . org-transclusion-mode)))
#+END_SRC
** Org-roam BibTeX processing
Allow BibTeX field processing in org-roam templates, and be able to show citation information in the org-roam sidebar

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-roam-bibtex
    :after (org-roam)
    :ensure t
    :commands (orb-insert-link orb-note-actions)
    :custom
    (bibtex-completion-bibliography "~/Documents/brain/literature/REFERENCES.bib")
    (orb-roam-ref-format 'org-cite)
    (orb-preformat-keywords '("citekey" "date" "entry-type" "file" "pdf?" "note?" "author" "editor" "author-abbrev" "editor-abbrev" "author-or-editor-abbrev"))
    (orb-process-file-keyword t)
    (orb-abbreviate-file-name t))
#+END_SRC

** Citations
I am using the new [[https://orgmode.org/manual/Citations.html][org-cite]] system for working with bibliographic information

Citar is a plugin for easily managing them.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package citar
    :ensure t
    :defer 2
    :bind (("C-c b" . citar-insert-citation))
    ;; :map minibuffer-local-map
    ;; ("M-b" . citar-insert-preset)))
    :custom
    (citar-bibliography '("~/Documents/brain/literature/REFERENCES.bib")))
#+END_SRC

Allow citar to work with org-roam particulars, including the ability to work at org-roam node levels (file or header IDs)

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package citar-org-roam
    :ensure t
    :commands (citar-org-roam-mode)
    :after (citar org-roam)
    :no-require
    :custom
    (citar-org-roam-subdir "literature")
    (citar-org-roam-note-title-template "${author} - ${editor}")
    :config (citar-org-roam-mode))
#+END_SRC
